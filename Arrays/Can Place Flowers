/* 
Source : https://leetcode.com/problems/can-place-flowers/?envType=study-plan-v2&envId=leetcode-75
Author : Ackienee George
Date   : 08/12/2025

You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: true

Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
Output: false
 
Constraints:
1 <= flowerbed.length <= 2 * 104
flowerbed[i] is 0 or 1.
There are no two adjacent flowers in flowerbed.
0 <= n <= flowerbed.length

UMPIRE: 
UNDERSTAND:
Problem: The int array 'flowerbed[]' is a flower bed containining 1's and 0's.
1 - Planted Flower
0 - No Planted Flower
NOTE: Flowers CAN NOT be planted next to eachother!
Does the flower bed have enough space to plant int 'n' flowers?
If yes, return true else, return false.

Input: flowerbed[] & n
Output/Return: bool (true/false)
Contraints:
    - 1 <= flowerbed.length <= 2 * 10^4
    - flowerbed[i] is 0 or 1.
    - There are no two adjacent flowers in flowerbed.
    - 0 <= n <= flowerbed.length
Assumptions:
    - every element is not 1
    - the first and last element is 1 (has a planted flower)

MATCH:
Arrays

PLAN:
FIND LENGTH OF ARRAY flowerbed[]
INTERATE THROUGH ARRAY (STARTING FROM INDEX 1)
    - DETERMINE IF THE CURRENT ELEMENT, THE ELEMENT BEFORE AND ELEMENT AFTER IS 0;
        - IF THATS THE CASE, CURRENT ELEMENT = 1
IF NUMBER OF PLANTED PLANTS = n
    - RETURN TRUE
ELSE
    - RETURN FALSE
*/

// IMPLEMENT:
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {

        int x = 0;
        for (int i = 1; i < flowerbed.size() - 1; i++) {

            if ((flowerbed[i - 1] == 0) && (flowerbed[i] == 0) && (flowerbed[i + 1] == 0)) {
                flowerbed[i] = 1;
                x++;
            }

        }

        return (x == n);
        
    }
};

/*
EVALUATE:
Can be make to handle the edge cause of the first and last element being 0 (No flowers planted).
- Will revisit later.
*/
